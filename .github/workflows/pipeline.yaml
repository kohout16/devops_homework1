name: All lessons
run-name: ${{ github.actor }} is testing out GitHub Actions 🚀
on: 
  #push:
  workflow_dispatch:
      inputs:
        lesson:
          description: 'Select the lesson to run'
          required: true
          default: 'lesson4'
          type: choice
          options:
            - test_url
            - lesson2
            - lesson4
            - lesson5
            - lesson8
jobs:
  "test_url":
    if: ${{ github.event.inputs.lesson == 'test_url' }}
    runs-on: ubuntu-latest #self-hosted
    steps:
      - run: echo "Testing load balancer nginx return page response ..."
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: |
          ./test_url.sh
  "lesson2":
    if: ${{ github.event.inputs.lesson == 'lesson2' }}
    runs-on: ubuntu-latest #self-hosted
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo '🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}.'
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo '💡 The ${{ github.repository }} repository has been cloned to the runner.'
      - run: echo "🖥️ The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - run: echo "🍏 This job's status is ${{ job.status }}."
      - run: python test.py && zip balicek.zip my_calculations.py

  "lesson4":
      if: ${{ github.event.inputs.lesson == 'lesson4' }}

      runs-on: ubuntu-latest
      environment: dev
      # run terraform in lesson-4/live-demo directory
      # defaults:
      #   run: cd lesson-4/live-demo
      steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with: 
          terraform_version: "1.11.1"

      - name: Terraform Init # proc protoze setup to neudela
        run: terraform init

      - name: Terraform destroy # potrebuju fakt vycistit stav aws
        run: terraform destroy -auto-approve

      - name: Terraform plan and apply
        #working-directory: lesson-4/live-demo
        env:
          TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_aws_region: eu-central-1
          TF_IN_AUTOMATION: true
          TF_INPUT: false
          TF_WORKSPACE: dev
        run: |
          terraform init
          terraform plan -no-color
          terraform apply -auto-approve -no-color
        
  "lesson5":
    if: ${{ github.event.inputs.lesson == 'lesson5' }}

    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Log in to Amazon ECR
        id: login-ecr
        run: |
          aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin 563748388258.dkr.ecr.eu-central-1.amazonaws.com
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with: 
          terraform_version: "1.11.1"

      - name: Terraform Init
        run: terraform init -upgrade

      # - name: Terraform destroy # potrebuju fakt vycistit stav aws
      #   run: terraform destroy -auto-approve
        
      - name: Terraform Plan
        run: terraform plan

      - name: Terraform Apply
        run: terraform apply -auto-approve
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: 563748388258.dkr.ecr.eu-central-1.amazonaws.com/python-calculator:latest

      - name: Get ECR repository URL
        id: ecr-url
        run: |
          ECR_URL=$(terraform output -raw ecr_repository_url)
          echo "ecr_url=$ECR_URL" >> $GITHUB_OUTPUT

  "lesson8":
    if: ${{ github.event.inputs.lesson == 'lesson8' }}

    runs-on: ubuntu-latest
    environment: dev
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with: 
        terraform_version: "1.11.1"      
    - name: Terraform create ecr repository
      working-directory: lesson-8/terraform/
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ vars.AWS_REGION }}
        TF_VAR_aws_account_id: ${{ vars.AWS_ACCOUNT_ID }}

        TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_aws_region: ${{ vars.AWS_REGION }}
        TF_IN_AUTOMATION: true
        TF_INPUT: false

        TF_WORKSPACE: dev
      run: |
        terraform init
        terraform plan -no-color -target=aws_ecr_repository.mynginx -out=tfplan
        terraform apply -auto-approve -no-color tfplan 
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Login to ECR
      uses: docker/login-action@v3
      with:
        registry: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com
        username: ${{ secrets.AWS_ACCESS_KEY_ID }}
        password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}      
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        push: true
        context: lesson-8/docker/
        tags: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/mynginx:latest

    - name: Terraform deploy
      working-directory: lesson-8/terraform/
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ vars.AWS_REGION }}      
        TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_aws_account_id: ${{ vars.AWS_ACCOUNT_ID }}
        TF_VAR_aws_region: ${{ vars.AWS_REGION }}
        TF_IN_AUTOMATION: true
        TF_INPUT: false
        TF_WORKSPACE: dev
      run: |
        terraform init
        terraform plan -no-color -out=tfplan
        terraform apply -auto-approve -no-color tfplan
      

